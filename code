<!DOCTYPE html>
<html>
<head>
  <title>3D Globe</title>
  <style>
    body {
      margin: 0;
      padding: 0;
      overflow: hidden;
    }
    
    canvas {
      width: 100%;
      height: 100%;
    }
  </style>
</head>
<body>
  <canvas id="canvas"></canvas>
  <script>
    const canvas = document.getElementById('canvas');
    const gl = canvas.getContext('webgl');
    let program;
    let texture;
    let mouseX = 0;
    let mouseY = 0;
    let lastMouseX = 0;
    let lastMouseY = 0;
    let rotationX = 0;
    let rotationY = 0;
    let lastRotationX = 0;
    let lastRotationY = 0;
    let isDragging = false;
    
    const loadShader = (gl, type, source) => {
      const shader = gl.createShader(type);
      gl.shaderSource(shader, source);
      gl.compileShader(shader);
      if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
        console.error('Error compiling shader:', gl.getShaderInfoLog(shader));
        gl.deleteShader(shader);
        return null;
      }
      return shader;
    };
    
    const initShaders = () => {
      const vertexShaderSource = `
        attribute vec4 aVertexPosition;
        attribute vec2 aTextureCoord;
        
        uniform mat4 uModelViewMatrix;
        uniform mat4 uProjectionMatrix;
        
        varying highp vec2 vTextureCoord;
        
        void main() {
          gl_Position = uProjectionMatrix * uModelViewMatrix * aVertexPosition;
          vTextureCoord = aTextureCoord;
        }
      `;
      
      const fragmentShaderSource = `
        varying highp vec2 vTextureCoord;
        
        uniform sampler2D uSampler;
        
        void main() {
          gl_FragColor = texture2D(uSampler, vec2(vTextureCoord.s, vTextureCoord.t));
        }
      `;
      
      const vertexShader = loadShader(gl, gl.VERTEX_SHADER, vertexShaderSource);
      const fragmentShader = loadShader(gl, gl.FRAGMENT_SHADER, fragmentShaderSource);
      
      program = gl.createProgram();
      gl.attachShader(program, vertexShader);
      gl.attachShader(program, fragmentShader);
      gl.linkProgram(program);
      
      if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
        console.error('Error linking program:', gl.getProgramInfoLog(program));
        gl.deleteProgram(program);
        return null;
      }
      
      gl.useProgram(program);
      
      program.vertexPositionAttribute = gl.getAttribLocation(program, 'aVertexPosition');
      gl.enableVertexAttribArray(program.vertexPositionAttribute);
      
      program.textureCoordAttribute = gl.getAttribLocation(program, 'aTextureCoord');
      gl.enableVertexAttribArray(program.textureCoordAttribute);
      
      program.modelViewMatrixUniform = gl.getUniformLocation(program, 'uModelViewMatrix');
      program.projectionMatrixUniform = gl.getUniformLocation(program, 'uProjectionMatrix');
      program.samplerUniform = gl.getUniformLocation(program, 'uSampler');
    };
    
    const initTexture = () => {
      texture = gl.createTexture();
      const image = new Image();
      image.onload = () => {
        gl.bindTexture(gl.TEXTURE_2D, texture);
        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);
        gl.generate
